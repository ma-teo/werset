{"version":3,"sources":["components/loading.js","components/verse.js","app.js","sw-register.js","index.js"],"names":["Loading","className","Verse","text","def","App","useState","choice","setChoice","useEffect","a","fetch","process","json","books","verses","book_ID","Math","round","random","length","chapter_ID","verse_ID","verse","src","window","innerWidth","innerHeight","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","error","render","document","getElementById","URL","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2LAIeA,EAJC,kBACd,qBAAKC,UAAU,aCQFC,EATD,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,IAAR,OACZ,oBAAGH,UAAU,QAAb,UACGE,EACD,uBACA,uBACCC,MCyBUC,EA1BH,WAAO,IAAD,EACYC,qBADZ,mBACTC,EADS,KACDC,EADC,KAkBhB,OAfAC,oBAAS,sBAAC,0CAAAC,EAAA,sEAC6BC,MAAM,GAAD,OAAIC,uCAAJ,OADlC,8BAC0EC,OAD1E,uBACDC,EADC,EACDA,MAAOC,EADN,EACMA,OAERC,EAAUC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAOK,OAAS,IACtDC,EAAaJ,KAAKC,MAAMD,KAAKE,UAAYJ,EAAOC,GAASI,OAAS,IAClEE,EAAWL,KAAKC,MAAMD,KAAKE,UAAYJ,EAAOC,GAASK,GAAc,IALnE,UAOqBV,MAAM,GAAD,OAAIC,uCAAJ,cAAuCI,EAAvC,YAAkDK,EAAlD,YAAgEC,IAP1F,gCAOuGT,OAPvG,iBAODU,EAPC,EAODA,MAEPf,EAAU,CACRL,KAAMoB,EACNnB,IAAI,GAAD,OAAKU,EAAME,GAAX,YAAuBK,EAAa,EAApC,YAAyCC,EAAW,KAXjD,4CAaP,IAGD,qCACE,qBAAKrB,UAAU,QAAQuB,IAAG,gCAA2BC,OAAOC,WAAlC,YAAgDD,OAAOE,aAAeC,IAAI,KACnGrB,EAAS,cAAC,EAAD,eAAWA,IAAa,cAAC,EAAD,QCblCsB,EAAcC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WA/B/B,OAsCS,SAAAW,GACLJ,QAAQI,MAAM,4CAA6CA,M,MC1FjEC,iBACE,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,QDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAI5C,GAAwBa,OAAOM,SAAS0B,MACpDC,SAAWjC,OAAOM,SAAS2B,OAIvC,OAGFjC,OAAOkC,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMvB,GAAN,sBAEPiB,IAgEV,SAAiCM,EAAOC,GAEtCzB,MAAMwB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7Bf,OAAOM,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAlB7B,OAqBS,WACLY,QAAQC,IACN,oEAvFAoB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCtC/BG,K","file":"static/js/main.f22e4cf6.chunk.js","sourcesContent":["const Loading = () => (\r\n  <div className=\"spinner\" />\r\n)\r\n\r\nexport default Loading\r\n","const Verse = ({text, def}) => (\r\n  <p className=\"verse\">\r\n    {text}\r\n    <br />\r\n    <br />\r\n    {def}\r\n  </p>\r\n)\r\n\r\nexport default Verse\r\n","import { useState, useEffect } from 'react'\r\nimport Loading from './components/loading'\r\nimport Verse from './components/verse'\r\n\r\nconst App = () => {\r\n  const [choice, setChoice] = useState()\r\n\r\n  useEffect(async () => {\r\n    const {books, verses} = await (await fetch(`${process.env.REACT_APP_API_URL}/0`)).json()\r\n\r\n    const book_ID = Math.round(Math.random() * (verses.length - 1))\r\n    const chapter_ID = Math.round(Math.random() * (verses[book_ID].length - 1))\r\n    const verse_ID = Math.round(Math.random() * (verses[book_ID][chapter_ID] - 1))\r\n\r\n    const {verse} = await (await fetch(`${process.env.REACT_APP_API_URL}/0/${book_ID}/${chapter_ID}/${verse_ID}`)).json()\r\n\r\n    setChoice({\r\n      text: verse,\r\n      def: `${books[book_ID]} ${chapter_ID + 1}:${verse_ID + 1}`\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <img className=\"image\" src={`https://picsum.photos/${window.innerWidth}/${window.innerHeight}`} alt=\"\" />\r\n      {choice ? <Verse {...choice} /> : <Loading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { StrictMode } from 'react'\r\nimport { render } from 'react-dom'\r\nimport App from './app'\r\nimport { register } from './sw-register'\r\nimport './index.css'\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>\r\n, document.getElementById('app'))\r\n\r\nregister()\r\n"],"sourceRoot":""}